name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]  # or "main" if that is your default branch
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # --- Windows with MSVC (cl) ---
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          
          # --- Ubuntu with GCC ---
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          
          # --- Ubuntu with Clang ---
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

        # Exclude incompatible combos
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - name: Check out repository (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: true   # <<--- Important for pulling submodules

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          # We'll put all build outputs in a subfolder named "build" (you can name it anything).
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: |
          cmake -S "${{ github.workspace }}" \
                -B "${{ steps.strings.outputs.build-output-dir }}" \
                -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
                -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -Dqualisys_cpp_sdk_BUILD_TESTS=ON
          # ^ Add other options if needed, e.g.:
          #   -Dqualisys_cpp_sdk_BUILD_EXAMPLES=ON

      - name: Build
        run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}
        # Note: On Windows with the Visual Studio generator, --config is required to select Release vs Debug.
        # On Linux with Make, the --config is ignored but harmless.

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure
        # ctest automatically looks for tests. The --build-config is needed for multi-config
        # (Visual Studio). On single-config (Make, Ninja), it is ignored.
